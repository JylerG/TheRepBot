const onlyShowAllTime =
        (
            settings[AppSetting.OnlyShowAllTimeScoreboard] as
                | string[]
                | undefined
        )?.[0] === "true";

if (onlyShowAllTime) {
        const redisKey = leaderboardKey("alltime");
        const { markdown: tableMarkdown, scores } = await buildOrUpdateAllTimeLeaderboard(
            context,
            subredditName,
            redisKey,
            pointName,
            pointSymbol,
            leaderboardSize
        );

        markdown += `\n\n${tableMarkdown}`;

        for (const { member, score } of scores) {
            await buildOrUpdateUserPage(context, {
                member,
                score,
                subredditName,
                pointName,
                pointSymbol,
                formattedDate,
                correctPermissionLevel,
            });
        }

        const expiry = expirationFor("alltime");
        if (expiry) {
            const ttl = Math.floor((expiry.getTime() - Date.now()) / 1000);
            if (ttl > 0) {
                await context.redis.expire(redisKey, ttl);
            }
        }
    } else {
        for (const timeframe of TIMEFRAMES) {
            const sectionMarkdown = await buildOrUpdateLeaderboardForAllTimeframes(
                context,
                subredditName,
                pointName,
                pointSymbol,
                leaderboardSize,
                formattedDate,
                timeframe,
                correctPermissionLevel
            );

            markdown += `\n\n${sectionMarkdown}`;
        }
    }

    try {
        const wikiPage = await context.reddit.getWikiPage(subredditName, wikiPageName);
        if (wikiPage.content !== markdown) {
            await context.reddit.updateWikiPage({
                subredditName,
                page: wikiPageName,
                content: markdown,
                reason: `Updated ${formattedDate}`,
            });
        }

        const wikiSettings = await wikiPage.getSettings();
        if (wikiSettings.permLevel !== correctPermissionLevel) {
            await context.reddit.updateWikiPageSettings({
                subredditName,
                page: wikiPageName,
                listed: true,
                permLevel: correctPermissionLevel,
            });
        }
    } catch {
        await context.reddit.createWikiPage({
            subredditName,
            page: wikiPageName,
            content: markdown,
            reason: `Initial setup`,
        });
        await context.reddit.updateWikiPageSettings({
            subredditName,
            page: wikiPageName,
            listed: true,
            permLevel: correctPermissionLevel,
        });
    }